############################################################################
#
# Copyright (c) 2010-2011 dsixda - dislam@rocketmail.com
#
# Android Kitchen is 100% free.  This script file is intended for personal
# and/or educational use only.  It may not be duplicated for monetary
# benefit or any other purpose without the permission of the developer.
#
############################################################################


clear
echo

if [ -d WORKING_* ]
then
  echo Found working folder
else
  echo No working folder found!
  exit 0
fi

cd WORKING_*

if [ -e META-INF/com/google/android/update-script ] && [ -e META-INF/com/google/android/updater-script ]
then

  echo
  echo "Error:  Both update-script and updater-script are detected in working folder." 
  echo "        Keep only one of them before building!" 
  echo

  cd ..
  exit 0
fi



echo
echo "Cleaning up any leftover files ..."
echo

rm -f *.zip
rm -f testkey.*
rm -f signapk.jar
rm -f signed*.zip
rm -f *smali.jar

#
# Clean up *.DS_Store hidden files
#
find . -name '*.DS_Store' -type f -delete

#
# Clean up stackdump files
#
find . -name sh.exe.stackdump -type f -delete


#
# Clean up temp files left behind by interrupted Amend/Edify conversion scripts
#
find META-INF/com/google/android/ -name 'sed*' -type f -delete


#
# Clean up strange temp file issue in root of working folder
#

file_list=`find . -maxdepth 1 -type f`

for filename in $file_list
do

  filename=`echo $filename | sed 's/\.\///g'`
  header_bytes=`od -A n -H -j 0 -N 4 $filename | sed 's/ //g'`

  if [ "$header_bytes" == "04034b50" ]
  then
    echo -n "Found file in root folder: $filename. Delete (y/n)? (default: y): "
    read delete_file

    if [ "$delete_file" != "n" ]
    then
      echo "Deleting $filename"
      rm -f $filename
    else
      echo "Keeping $filename"
    fi
  fi
done


cd ..
scripts/prompt_nand_type
cd WORKING_*


echo
echo `pwd`
echo
ls -lrt
cd ..
echo


scripts/fix_pre_build
cmd_line=`scripts/get_cmdline`

extreme=no
express=no
interactive=no

echo
echo "=========================================================================="
echo
echo "Select a build option:"
echo
echo "  1 = Interactive Mode - recommended for most users"
echo "      (Guide me through the build)"
echo
echo "  2 = Express Mode - for advanced users"
echo "      (Zipalign, Edify, don't sign ROM, auto-name ZIP)"
echo 
echo "  3 = Extreme Mode - for advanced users"
echo "      (No zipalign, no script conversion, don't sign ROM, auto-name ZIP)"
echo 
echo "  4 = Cancel - Don't build now"
echo
echo "=========================================================================="
echo
echo -n "Number (default: 1): "

read build_mode

# Default is 1, so remember to account for Enter key
if [ "$build_mode" == "4" ]
then
  echo "Cancelled"
  exit 0
elif [ "$build_mode" == "3" ]
then
  extreme=yes  
elif [ "$build_mode" == "2" ]
then
  express=yes 
else
  interactive=yes
fi


if [ "$extreme" == "no" ]
then
  scripts/do_zipalign for_build $express
fi

if [ "$?" == "1" ]
then
  echo "Cancelling build"
  exit 0
fi

cd WORKING_*

#
# Create update.zip
#
echo
echo Making update.zip ...

if [ "$cmd_line" == "dsixda Null" ]
then
  zip -r -y -q update * -x *.cvs* *.git* *.svn* \
      *updater-script.orig* *update-binary.orig* *update-script.orig* \
      boot.img 
else
  zip -r -y -q update * -x *.cvs* *.git* *.svn* \
      *updater-script.orig* *update-binary.orig* *update-script.orig* 
fi      

echo

if [ -e update.zip ]
then
  echo update.zip created 
  echo
else
  echo "Error: update.zip not created!"
  cd ..
  exit 0
fi


#
# Convert update-script (Amend) to updater-script (Edify) in the ZIP file only
#

if [ "$extreme" == "no" ] && [ -e META-INF/com/google/android/update-script ]
then
 
  cd ..
  scripts/update_script_should_convert_back
  auto_convert="$?"
  cd WORKING_*
  
  if [ "$auto_convert" == "1" ] || [ "$express" == "yes" ]
  then 
    convert_it=y
  else
    echo
    echo "--------------------------------------------------------------------------"
    echo 
    echo " update-script detected in ROM"
    echo
    echo " To ensure compatibility with newer custom recovery images, you have"
    echo " the option of using an updater-script (Edify) instead of an"
    echo " update-script (Amend) in your ROM's ZIP file."
    echo 
    echo " Your working folder will remain the same and continue to have the "
    echo " original update-script."
    echo 
    echo -n " Add updater-script to ROM (y/n)? (default: n): "
    read convert_it
  fi

  if [ "$convert_it" == "y" ]
  then

    cd ..
    scripts/convert_update_script for_zip $express

    if [ "$?" != "1" ]
    then

      cd WORKING_*

      if [ "$express" == "yes" ]
      then
        proceed_change=y
      else
        echo "Proceed with the change (y/n)?"
        echo 
        echo "  y = Proceed; updater-script and update-binary will be moved to the ZIP"
        echo "      file; update-script in ZIP file will be removed but will remain in"
        echo "      working folder."
        echo "  n = Cancel; updater-script and update-binary will be deleted and not"
        echo "      used."
        echo
         
        echo -n "? (default: y): "
        read proceed_change 
      fi

      echo

      if [ "$proceed_change" != "n" ]
      then

        if [ -e META-INF/com/google/android/updater-script ]
        then
          zip update.zip META-INF/com/google/android/updater-script META-INF/com/google/android/update-binary
          zip -d update.zip META-INF/com/google/android/update-script
        else
          echo "updater-script not found, keeping update-script"
        fi

      else
        echo
        echo "Cancelling"
      fi

      rm -f META-INF/com/google/android/updater-script
      rm -f META-INF/com/google/android/update-binary

      if [ "$auto_convert" == "1" ] && [ "$proceed_change" == "n" ]
      then
        echo "The update-script is not suitable for flashing your ROM."
        echo "Removing update.zip ..."
        rm -f update.zip
        echo
        cd ..
        exit 0
      fi

    else
      echo "Keeping update-script"
      cd WORKING_*
    fi

  else
    echo
    echo
    echo "Keeping update-script"
  fi

  echo

else

  #
  # For Extreme mode
  #

  if [ -e META-INF/com/google/android/update-script ]
  then
    echo "update-script (Amend) found"
  fi
  
  if [ -e META-INF/com/google/android/updater-script ]
  then
    echo "updater-script (Edify) found"
  fi

  echo
fi



#
# Sign update.zip if necessary
#

date_str=`date '+%m%d%y_%H%M%S'`

cd ..
device=`scripts/get_device_name | sed 's/ /_/g'`
cd WORKING_*


sign_update=no
sign_str=unsigned

if [ "$interactive" == "yes" ]
then
  echo
  echo "It is recommended that you sign your ROM."
  echo -n "Sign it (y/n)? (default: y): "
  read do_sign

  if [ "$do_sign" != "n" ]
  then
    sign_update=yes
    sign_str=signed
  fi
fi

final_file=$device\_$sign_str\_$date_str.zip


if [ "$sign_update" == "no" ]
then
  mv update.zip $final_file
  res=$?

else
  echo
  echo Signing update.zip ...

  cp ../tools/signapk_files/testkey.* .
  cp ../tools/signapk_files/signapk.jar .

  java -jar signapk.jar testkey.x509.pem testkey.pk8 update.zip $final_file
  res=$?

  rm -f testkey.*
  rm -f signapk.jar
  rm -f update.zip
fi


if [ -e $final_file ] && [ "$res" == "0" ]
then

  #
  # Rename zip
  #
  if [ "$interactive" == "yes" ]
  then
    cd ..
    final_file2=`scripts/set_update_name $final_file`
    cd WORKING_*
    if [ "$final_file2" != "$final_file" ]
    then
      mv -fv $final_file $final_file2
      final_file=$final_file2
    fi
  fi

  echo

  #
  # Make output folder
  #
  if [ -d ../OUTPUT_ZIP ]
  then
    echo "Found OUTPUT_ZIP folder" 
  else
    echo "Creating folder OUTPUT_ZIP ..."
    mkdir ../OUTPUT_ZIP
  fi

  mv $final_file ../OUTPUT_ZIP/

  echo
  echo
  echo
  echo "=========================================================================="
  echo
  echo "Congratulations ... your ROM is here:"
  echo
  echo "----> OUTPUT_ZIP/$final_file" 
  echo
  echo
  echo "Copy this to your device and flash from recovery menu."
  echo

  echo "Remember to do a data and/or cache wipe if necessary!"
  echo
  echo "If your ROM does not boot, please refer to the FAQ for troubleshooting."

  if [ "$sign_update" == "no" ]
  then
    echo
    echo "PLEASE NOTE: You will need to disable signature checks in the recovery"
    echo "menu to flash this ROM!  If you wish to sign this ROM later, please use"
    echo "the Sign ZIP option in the Advanced menu of the kitchen."
  fi

  echo

else 

  echo
  echo "Was not able to create $final_file!"
  echo

  if [ "$sign_update" == "yes" ]
  then
    if [ `uname | grep Linux` ] 
    then
      echo "Ensure you have a recent version of the Sun Java JDK"
    
    elif [ `uname | grep CYGWIN` ]
    then
      echo "Ensure you have the Sun Java JDK installed on your PC." 
      echo
      echo "If you already have the JDK, then perhaps the path to java.exe was"
      echo "not defined properly:"
      echo 
      echo "e.g.  In $HOME/.bash_profile, add to the end:"
      echo "      PATH=/cygdrive/c/Program\ Files/Java/jdk1.6.0_18/bin:\${PATH}" 
      echo 
      echo "      The above is an example. Your path may be different."

    elif [ `sw_vers | grep -o Mac` ]
    then
      echo "You may need to install SoyLatte for Mac OS X (to replace the standard "
      echo "Java JDK)"
    fi
  fi
fi

cd ..

# System beep
echo 

